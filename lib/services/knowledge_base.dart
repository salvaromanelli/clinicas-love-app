import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'dart:math' as Math;

class KnowledgeBase {
  // Las diferentes categor√≠as de conocimiento
  final Map<String, List<Map<String, dynamic>>> _treatments = {};
  final Map<String, List<Map<String, dynamic>>> _prices = {};
  final List<Map<String, dynamic>> _faq = [];
  final List<Map<String, dynamic>> _clinics = [];
  final List<Map<String, dynamic>> _webReferences = [];

  bool _isInitialized = false;
  
  // Configuraci√≥n de Supabase
  late final String _supabaseUrl;
  late final String _supabaseKey;
  
  // Singleton para acceso global
  static final KnowledgeBase _instance = KnowledgeBase._internal();
  
  factory KnowledgeBase() {
    return _instance;
  }
  
  KnowledgeBase._internal() {
    // Cargar credenciales desde variables de entorno
    _supabaseUrl = dotenv.env['SUPABASE_URL'] ?? '';
    _supabaseKey = dotenv.env['SUPABASE_KEY'] ?? '';
    
    debugPrint('üîß KnowledgeBase inicializado con URL: ${_supabaseUrl.isNotEmpty ? _supabaseUrl : 'No configurada'}');
  }
  
  // Inicializar y cargar datos
  Future<void> initialize() async {
    debugPrint('üîÑ Inicializando KnowledgeBase...');
    await _loadCachedData();
    await refreshAllData();
    _isInitialized = true; 
  }
  
  // Cargar datos desde el almacenamiento local
  Future<void> _loadCachedData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // Cargar precios
      final pricesJson = prefs.getString('cached_prices');
      if (pricesJson != null) {
        final pricesData = jsonDecode(pricesJson) as Map<String, dynamic>;
        pricesData.forEach((category, prices) {
          _prices[category] = (prices as List).cast<Map<String, dynamic>>();
        });
      }
      
      // Cargar tratamientos
      final treatmentsJson = prefs.getString('cached_treatments');
      if (treatmentsJson != null) {
        final treatmentsData = jsonDecode(treatmentsJson) as Map<String, dynamic>;
        treatmentsData.forEach((category, treatments) {
          _treatments[category] = (treatments as List).cast<Map<String, dynamic>>();
        });
      }
      
      // Cargar FAQ
      final faqJson = prefs.getString('cached_faq');
      if (faqJson != null) {
        _faq.addAll((jsonDecode(faqJson) as List).cast<Map<String, dynamic>>());
      }
      
      // Cargar cl√≠nicas
      final clinicsJson = prefs.getString('cached_clinics');
      if (clinicsJson != null) {
        _clinics.addAll((jsonDecode(clinicsJson) as List).cast<Map<String, dynamic>>());
      }

      final webReferencesJson = prefs.getString('cached_web_references');
      if (webReferencesJson != null) {
        _webReferences.addAll((jsonDecode(webReferencesJson) as List).cast<Map<String, dynamic>>());
      }
      
      debugPrint('‚úÖ Datos en cach√© cargados');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error cargando datos en cach√©: $e');
      // Si hay error, cargar datos de respaldo
      _loadFallbackData();
    }
  }
  
  // Actualizar todos los datos
  Future<void> refreshAllData() async {
    try {
      await Future.wait([
        refreshPrices(),
        refreshTreatments(),
        refreshFAQ(),
        refreshClinics(),
        refreshWebReferences(), // A√±adir esta l√≠nea
      ]);
      debugPrint('‚úÖ Todos los datos actualizados');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error actualizando datos: $e');
      // Si hay error, asegurarse de que tenemos datos de respaldo
      _loadFallbackData();
    }
  }
  
  // Cargar precios desde Supabase con mejor manejo de errores
  Future<void> refreshPrices() async {
    try {
      final response = await http.get(
        Uri.parse('$_supabaseUrl/rest/v1/prices?select=*'),
        headers: {
          'apikey': _supabaseKey,
          'Authorization': 'Bearer $_supabaseKey'
        },
      ).timeout(Duration(seconds: 5)); // A√±adir timeout para evitar esperas largas
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        _prices.clear();
        
        // Organizar por categor√≠a
        for (var item in data) {
          final category = item['category'] as String? ?? 'Sin categor√≠a';
          _prices[category] ??= [];
          _prices[category]!.add(item as Map<String, dynamic>);
        }
        
        // Guardar en cach√©
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('cached_prices', jsonEncode(_prices));
        
        debugPrint('‚úÖ Precios actualizados: ${data.length} √≠tems');
      } else {
        debugPrint('‚ö†Ô∏è Error cargando precios: ${response.statusCode}');
        // Si la API devuelve error, cargar datos de respaldo
        _loadFallbackPrices();
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error actualizando precios: $e');
      // Si hay una excepci√≥n, cargar datos de respaldo
      _loadFallbackPrices();
    }
  }
  
  // Cargar todos los datos de respaldo
  void _loadFallbackData() {
    _loadFallbackPrices();
    _loadFallbackTreatments();
    _loadFallbackFAQ();
    _loadFallbackClinics();
    _loadFallbackWebReferences(); // A√±adir esta l√≠nea
    debugPrint('‚úÖ Datos de respaldo cargados');
  }
  
  // Cargar precios de respaldo
  void _loadFallbackPrices() {
    _prices.clear();
    _prices['Facial'] = [
      {
        'id': '1',
        'treatment': 'Botox',
        'price': '300‚Ç¨',
        'category': 'Facial',
        'description': 'Tratamiento por zona para arrugas de expresi√≥n'
      },
      {
        'id': '2',
        'treatment': 'Aumento de labios',
        'price': '300‚Ç¨',
        'category': 'Facial',
        'description': 'Relleno de labios con √°cido hialur√≥nico'
      },
      {
        'id': '3',
        'treatment': 'Eliminaci√≥n de ojeras',
        'price': '90‚Ç¨',
        'category': 'Facial',
        'description': 'Tratamiento espec√≠fico para ojeras con √°cido hialur√≥nico'
      },
      {
        'id': '4',
        'treatment': 'Full Face',
        'price': '2.200‚Ç¨',
        'category': 'Facial',
        'description': 'Combinaci√≥n de Botox y √°cido hialur√≥nico'
      },
    ];
    
    _prices['Medicina Est√©tica Corporal'] = [
      {
        'id': '5',
        'treatment': 'Bono de 10 sesiones de mesoterapia corporal',
        'price': '530‚Ç¨',
        'category': 'Corporal',
        'description': 'Tratamiento reductor y reafirmante'
      },
      {
        'id': '6',
        'treatment': 'Carboxiterapia corporal',
        'price': '90‚Ç¨',
        'category': 'Corporal',
        'description': 'Tratamiento para celulitis y flacidez'
      },
    ];
    
    _prices['Cirug√≠a Pl√°stica'] = [
      {
        'id': '8',
        'treatment': 'Mastopexia con pr√≥tesis',
        'price': '6.300‚Ç¨',
        'category': 'Cirug√≠a Pl√°stica',
        'description': 'Elevaci√≥n de pecho con implantes'
      },
      {
        'id': '9',
        'treatment': 'Ninfoplastia',
        'price': '2.199‚Ç¨',
        'category': 'Cirug√≠a Pl√°stica',
        'description': 'Reducci√≥n de labios menores'
      },
    ];
    
    debugPrint('‚ö†Ô∏è Cargados precios de respaldo: ${_prices.length} categor√≠as');
  }
  
  // Cargar tratamientos de respaldo
  void _loadFallbackTreatments() {
    _treatments['Facial'] = [
      {
        'name': 'Botox',
        'description': 'Suaviza las l√≠neas de expresi√≥n y previene arrugas',
        'benefits': ['Sin tiempo de recuperaci√≥n', 'Resultados en 3-7 d√≠as', 'Dura 4-6 meses'],
      },
      {
        'name': '√Åcido Hialur√≥nico',
        'description': 'Relleno facial para recuperar volumen y definir contornos',
        'benefits': ['Resultados inmediatos', 'Apariencia natural', 'Dura hasta 12 meses'],
      },
      {
        'name': 'Eliminaci√≥n de ojeras',
        'description': 'Tratamiento espec√≠fico para reducir el aspecto de las ojeras',
        'benefits': ['Resultados inmediatos', 'Aspecto descansado', 'Efecto rejuvenecedor'],
      },
    ];
    
    _treatments['Corporal'] = [
      {
        'name': 'Presoterapia',
        'description': 'Drenaje linf√°tico para eliminar l√≠quidos y toxinas',
        'benefits': ['Reduce hinchaz√≥n', 'Mejora la circulaci√≥n', 'Combate la celulitis'],
      },
      {
        'name': 'Masajes reductores',
        'description': 'Masajes espec√≠ficos para modelar y reducir volumen',
        'benefits': ['Tonifica la piel', 'Reduce medidas', 'Mejora la firmeza'],
      },
    ];
    
    debugPrint('‚ö†Ô∏è Cargados tratamientos de respaldo: ${_treatments.length} categor√≠as');
  }

  // Cargar cl√≠nicas de respaldo
  void _loadFallbackClinics() {
    // Limpiar la lista existente
    _clinics.clear();
    
    // A√±adir nuevos elementos
    _clinics.addAll([
      {
        'name': 'Cl√≠nicas Love Barcelona',
        'address': 'Carrer Diputacio 327, 08009 Barcelona',
        'phone': '+34 938526533',
        'schedule': 'Lunes a Viernes: 9:00 - 20:00.'
      },
      {
        'name': 'Cl√≠nicas Love Madrid',
        'address': 'Calle Edgar Neville, 16. 28020 Madrid',
        'phone': '34 919993515',
        'schedule': 'Lunes a Viernes: 10:00 - 20:00.'
      },
    ]);
    
    debugPrint('‚ö†Ô∏è Cargada informaci√≥n de cl√≠nicas de respaldo: ${_clinics.length} cl√≠nicas');
  }

  // Cargar FAQ de respaldo
  void _loadFallbackFAQ() {
    // Limpiar la lista existente
    _faq.clear();
    
    // A√±adir nuevos elementos
    _faq.addAll([
      {
        'question': '¬øEs doloroso el tratamiento con Botox?',
        'answer': 'El tratamiento con Botox causa m√≠nimas molestias. Se utiliza una aguja muy fina y la sensaci√≥n es como un peque√±o pinchazo.'
      },
      {
        'question': '¬øCu√°nto dura el efecto del √°cido hialur√≥nico?',
        'answer': 'El efecto del √°cido hialur√≥nico suele durar entre 6 y 12 meses, dependiendo de la zona tratada y el metabolismo de cada persona.'
      },
      {
        'question': '¬øCu√°ndo ver√© resultados con los tratamientos anticelul√≠ticos?',
        'answer': 'Los resultados de los tratamientos anticelul√≠ticos comienzan a verse generalmente despu√©s de 3-4 sesiones. Para resultados √≥ptimos se recomiendan entre 8-10 sesiones.'
      },
    ]);
    
    debugPrint('‚ö†Ô∏è Cargadas FAQs de respaldo: ${_faq.length} preguntas');
  }

    // Cargar referencias web de respaldo
  void _loadFallbackWebReferences() {
    // Limpiar la lista existente
    _webReferences.clear();
    
    // A√±adir referencias web para tratamientos populares
    _webReferences.addAll([
      {
        'treatment': 'Botox',
        'url': 'https://www.mayoclinic.org/es-es/tests-procedures/botox/about/pac-20384658',
        'title': 'Botox: Usos y efectos - Mayo Clinic',
        'summary': 'El botox bloquea las se√±ales de los nervios a los m√∫sculos. El m√∫sculo inyectado ya no puede contraerse, lo que hace que las arrugas se relajen y se suavicen temporalmente.',
        'tags': ['botox', 'facial', 'antiarrugas', 'tratamiento']
      },
      {
        'treatment': 'Aumento de Labios',
        'url': 'https://clinicaslove.com/aumento-de-labios/?_gl=1*1mtutuy*_up*MQ..*_gs*MQ..&gclid=Cj0KCQjw-e6-BhDmARIsAOxxlxUJqU9xbhI9oFCQJgORVijpYxwjSzWF5b1UHWiIe4ebyl4E6BS_VfQaAieAEALw_wcB',
        'title': 'Aumento de Labios - Cl√≠nicas Love',
        'summary': 'Los Labios que siempre So√±aste. Aumento de Labios con √Åcido Hialur√≥nico. Resultados Naturales y Duraderos. ¬°Pide tu Cita!',
        'tags': ['labios', 'facial', 'aumento', 'tratamiento', 'relleno', 'perfilado', 'hidratacion']
      },
      {
        'treatment': 'Lipopapada',
        'url': 'https://clinicaslove.com/lipopapada/?_gl=1*17wfpwh*_up*MQ..*_gs*MQ..&gclid=Cj0KCQjw-e6-BhDmARIsAOxxlxUJqU9xbhI9oFCQJgORVijpYxwjSzWF5b1UHWiIe4ebyl4E6BS_VfQaAieAEALw_wcB',
        'title': 'Simetr√≠a en tu rostro - Cl√≠nicas Love',
        'summary': '¬øQu√© es la lipopapada? Descubre c√≥mo eliminar la papada y recuperar la armon√≠a facial con tratamientos de lipopapada en Cl√≠nicas Love.',
        'tags': ['lipopapada', 'facial', 'papada', 'armon√≠a', 'perfilado', 'cuello']
      },
      {
        'treatment': 'Bichectom√≠a',
        'url': 'https://clinicaslove.com/bichectomia/?_gl=1*h1m8nc*_up*MQ..*_gs*MQ..&gclid=Cj0KCQjw-e6-BhDmARIsAOxxlxUJqU9xbhI9oFCQJgORVijpYxwjSzWF5b1UHWiIe4ebyl4E6BS_VfQaAieAEALw_wcB',
        'title': 'Bichectom√≠a - Cl√≠nicas Love',
        'summary': '¬øQu√© es la bichectom√≠a? Descubre c√≥mo reducir las mejillas y definir el rostro con la cirug√≠a de bichectom√≠a en Cl√≠nicas Love.',
        'tags': ['bichectom√≠a', 'facial', 'mejillas', 'definici√≥n', 'cirug√≠a', 'armon√≠a']
      },
      {
        'treatment': 'Blefaroplastia',
        'url': 'https://clinicaslove.com/blefaroplastia/?_gl=1*1t2uu4w*_up*MQ..*_gs*MQ..&gclid=Cj0KCQjw-e6-BhDmARIsAOxxlxUJqU9xbhI9oFCQJgORVijpYxwjSzWF5b1UHWiIe4ebyl4E6BS_VfQaAieAEALw_wcB',
        'title': 'Blefaroplastia - Cl√≠nicas Love',
        'summary': '¬øQu√© es la blefaroplastia? Descubre c√≥mo rejuvenecer la mirada y eliminar bolsas y ojeras con la cirug√≠a de blefaroplastia en Cl√≠nicas Love.',
        'tags': ['blefaroplastia', 'facial', 'ojos', 'rejuvenecimiento', 'cirug√≠a', 'bolsas', 'ojeras']
      },
      {
        'treatment': '√Åcido Hialur√≥nico',
        'url': 'https://www.clinicaplanas.com/es/tratamientos-faciales/acido-hialuronico',
        'title': '√Åcido Hialur√≥nico: Aplicaciones y Resultados',
        'summary': 'El √°cido hialur√≥nico es una sustancia que se encuentra naturalmente en la piel y ayuda a mantenerla hidratada y firme. Como relleno d√©rmico, puede suavizar arrugas y a√±adir volumen.',
        'tags': ['√°cido hialur√≥nico', 'rellenos', 'facial', 'volumen']
      },
      {
        'treatment': 'Eliminaci√≥n de ojeras',
        'url': 'https://www.avclinic.es/tratamientos-faciales/eliminacion-de-ojeras/',
        'title': 'Tratamiento Avanzado de Ojeras - AV Clinic',
        'summary': 'La eliminaci√≥n de ojeras con √°cido hialur√≥nico corrige la depresi√≥n bajo los ojos rellenando el surco lagrimal, reduciendo sombras y dando un aspecto m√°s descansado.',
        'tags': ['ojeras', 'facial', '√°cido hialur√≥nico', 'cansancio']
      },
      {
        'treatment': 'Armomizaci√≥n facial',
        'url': 'https://clinicaslove.com/armonizacion-facial/?_gl=1*7nl3gg*_up*MQ..*_gs*MQ..&gclid=Cj0KCQjw-e6-BhDmARIsAOxxlxUJqU9xbhI9oFCQJgORVijpYxwjSzWF5b1UHWiIe4ebyl4E6BS_VfQaAieAEALw_wcB',
        'title': 'Armonizaci√≥n Facial - Cl√≠nicas Love',
        'summary': '¬øQu√© es la armonizaci√≥n facial? Descubre los tratamientos para armonizar y embellecer el rostro, como rellenos faciales, bichectom√≠a, rinomodelaci√≥n y m√°s.',
        'tags': ['armonizacion', 'rejuvenecida', 'facial', 'menton', 'col√°geno', 'pomulos']
      },
      {
        'treatment': 'Rinomodelaci√≥n sin cirug√≠a',
        'url': 'https://clinicaslove.com/rinomodelacion/?_gl=1*ofdfym*_up*MQ..*_gs*MQ..&gclid=Cj0KCQjw-e6-BhDmARIsAOxxlxUJqU9xbhI9oFCQJgORVijpYxwjSzWF5b1UHWiIe4ebyl4E6BS_VfQaAieAEALw_wcB',
        'title': 'Rinomodelaci√≥n sin cirug√≠a - Cl√≠nicas Love',
        'summary': 'La rinomodelaci√≥n es un procedimiento est√©tico que corrige defectos menores de la nariz sin cirug√≠a. Se utiliza √°cido hialur√≥nico para perfilar y armonizar la forma nasal.',
        'tags': ['rinomodelaci√≥n', 'nariz', 'est√©tica', 'nasal', 'perfilado']
      },
      {
        'treatment': 'Presoterapia',
        'url': 'https://www.clinicaslore.com/tratamientos-corporales/presoterapia/',
        'title': 'Presoterapia: Beneficios y Procedimiento',
        'summary': 'La presoterapia es un tratamiento de drenaje linf√°tico que utiliza presi√≥n controlada para mejorar la circulaci√≥n, reducir la retenci√≥n de l√≠quidos y combatir la celulitis.',
        'tags': ['presoterapia', 'corporal', 'drenaje', 'celulitis', 'retenci√≥n']
      },
      {
        'treatment': 'Radiofrecuencia',
        'url': 'https://www.mipiel.es/tratamientos-faciales/radiofrecuencia/',
        'title': 'Radiofrecuencia Facial y Corporal',
        'summary': 'La radiofrecuencia es un tratamiento que utiliza energ√≠a t√©rmica para estimular la producci√≥n de col√°geno y elastina, mejorando la firmeza y elasticidad de la piel.',
        'tags': ['radiofrecuencia', 'facial', 'corporal', 'flacidez', 'col√°geno']
      },
      {
        'treatment': 'Microdermoabrasi√≥n',
        'url': 'https://www.dermatologiamadrid.com/tratamientos-faciales/microdermoabrasion/',
        'title': 'Microdermoabrasi√≥n: Renovaci√≥n de la Piel',
        'summary': 'La microdermoabrasi√≥n es una t√©cnica de exfoliaci√≥n que elimina las capas superficiales de la piel, reduciendo imperfecciones, cicatrices leves y mejorando la textura general.',
        'tags': ['microdermoabrasi√≥n', 'exfoliaci√≥n', 'facial', 'textura', 'cicatrices']
      },
      {
        'treatment': 'Aumento de Pecho',
        'url': 'https://clinicaslove.com/aumento-de-pecho/?_gl=1*19x62qz*_up*MQ..&gclid=Cj0KCQjw-e6-BhDmARIsAOxxlxUJqU9xbhI9oFCQJgORVijpYxwjSzWF5b1UHWiIe4ebyl4E6BS_VfQaAieAEALw_wcB',
        'title': 'Aumento de Pecho - Cl√≠nicas Love',
        'summary': '¬øQu√© es el aumento de pecho? Descubre c√≥mo aumentar el volumen y mejorar la forma de los senos con la cirug√≠a de aumento de pecho en Cl√≠nicas Love.',
        'tags': ['aumento de pecho', 'mamoplastia', 'cirug√≠a', 'implantes', 'senos']
      },
      {
        'treatment': 'K-L√°ser',
        'url': 'https://clinicaslove.com/k-laser/?_gl=1*1tw2sed*_up*MQ..&gclid=Cj0KCQjw-e6-BhDmARIsAOxxlxUJqU9xbhI9oFCQJgORVijpYxwjSzWF5b1UHWiIe4ebyl4E6BS_VfQaAieAEALw_wcB',
        'title': 'K-L√°ser - Cl√≠nicas Love',
        'summary': '¬øQu√© es el K-L√°ser? Descubre c√≥mo mejorar la textura de la piel, reducir cicatrices y estimular la producci√≥n de col√°geno con el tratamiento de K-L√°ser en Cl√≠nicas Love.',
        'tags': ['k-l√°ser', 'rejuvenecimiento', 'cicatrices', 'col√°geno']
      },
      {
        'treatment': 'Eliminaci√≥n de arrugas',
        'url': 'https://clinicaslove.com/eliminacion-de-arrugas/?_gl=1*rasu3*_up*MQ..&gclid=Cj0KCQjw-e6-BhDmARIsAOxxlxUJqU9xbhI9oFCQJgORVijpYxwjSzWF5b1UHWiIe4ebyl4E6BS_VfQaAieAEALw_wcB',
        'title': 'Eliminaci√≥n de Arrugas - Cl√≠nicas Love',
        'summary': '¬øQu√© es la eliminaci√≥n de arrugas? Descubre los tratamientos para reducir y prevenir las arrugas faciales con Botox, √°cido hialur√≥nico y otros procedimientos en Cl√≠nicas Love.',
        'tags': ['arrugas', 'facial', 'botox', '√°cido hialur√≥nico']
      },
      {
        'treatment': 'Surco Nasogeniano',
        'url': 'https://clinicaslove.com/surco-nasogeniano/?_gl=1*1rf516n*_up*MQ..&gclid=Cj0KCQjw-e6-BhDmARIsAOxxlxUJqU9xbhI9oFCQJgORVijpYxwjSzWF5b1UHWiIe4ebyl4E6BS_VfQaAieAEALw_wcB',
        'title': 'Surco Nasogeniano - Cl√≠nicas Love',
        'summary': '¬øQu√© es el surco nasogeniano? Descubre c√≥mo eliminar las arrugas de la sonrisa y rejuvenecer el rostro con tratamientos de surco nasogeniano en Cl√≠nicas Love.',
        'tags': ['surco nasogeniano', 'facial', 'arrugas', 'sonrisa', 'rejuvenecimiento']
      },
      {
        'treatment': 'Laser CO2',
        'url': 'https://clinicaslove.com/laser-co2/?_gl=1*1ssu4xk*_up*MQ..&gclid=Cj0KCQjw-e6-BhDmARIsAOxxlxUJqU9xbhI9oFCQJgORVijpYxwjSzWF5b1UHWiIe4ebyl4E6BS_VfQaAieAEALw_wcB',
        'title': 'Laser CO2 - Cl√≠nicas Love',
        'summary': '¬øQu√© es el l√°ser CO2? Descubre c√≥mo mejorar la textura de la piel, reducir cicatrices y estimular la producci√≥n de col√°geno con el tratamiento de l√°ser CO2 en Cl√≠nicas Love.',
        'tags': ['l√°ser co2', 'rejuvenecimiento', 'cicatrices', 'col√°geno']
      },
      
    ]);
    
    debugPrint('‚ö†Ô∏è Cargadas referencias web de respaldo: ${_webReferences.length} p√°ginas');
  }
  
  // Implementar los m√©todos necesarios para la carga desde API
  Future<void> refreshTreatments() async {
    // Intentar cargar desde API
    try {
      final response = await http.get(
        Uri.parse('$_supabaseUrl/rest/v1/treatments?select=*'),
        headers: {
          'apikey': _supabaseKey,
          'Authorization': 'Bearer $_supabaseKey'
        },
      ).timeout(Duration(seconds: 5));
      
      if (response.statusCode == 200) {
        // Procesar respuesta
        // C√≥digo similar al de refreshPrices
        debugPrint('‚úÖ Tratamientos actualizados desde API');
      } else {
        // Si hay error, usar respaldo
        _loadFallbackTreatments();
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error cargando tratamientos desde API: $e');
      _loadFallbackTreatments();
    }
  }
  
  Future<void> refreshFAQ() async {
    // Intentar cargar desde API o usar respaldo
    _loadFallbackFAQ();
    debugPrint('‚úÖ FAQs actualizadas');
  }
    
  Future<void> refreshClinics() async {
    try {
      // CARGAR DESDE SUPABASE - Esta es la clave
      final response = await http.get(
        Uri.parse('$_supabaseUrl/rest/v1/clinics?select=*'),
        headers: {
          'apikey': _supabaseKey,
          'Authorization': 'Bearer $_supabaseKey',
          'Content-Type': 'application/json',
          'Prefer': 'return=representation'
        },
      ).timeout(const Duration(seconds: 5));
      
      debugPrint('üîç Clinics response status: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        _clinics.clear();
        
        // Transformar los datos recibidos al formato esperado
        for (var item in data) {
          _clinics.add({
            'name': item['name'] ?? '',
            'address': item['address'] ?? '',
            'phone': item['phone'] ?? '',
            'schedule': item['schedule'] ?? ''
          });
        }
        
        // Guardar en cach√©
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('cached_clinics', jsonEncode(_clinics));
        
        debugPrint('‚úÖ Informaci√≥n de cl√≠nicas actualizada: ${_clinics.length} cl√≠nicas');
      } else {
        debugPrint('‚ö†Ô∏è Error cargando cl√≠nicas: ${response.statusCode}');
        debugPrint('‚ö†Ô∏è Respuesta: ${response.body.substring(0, Math.min(100, response.body.length))}...');
        _loadFallbackClinics();
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error actualizando cl√≠nicas: $e');
      _loadFallbackClinics();
    }
  }

  Future<void> refreshWebReferences() async {
    try {
      final response = await http.get(
        Uri.parse('$_supabaseUrl/rest/v1/web_references?select=*'),
        headers: {
          'apikey': _supabaseKey,
          'Authorization': 'Bearer $_supabaseKey',
          'Content-Type': 'application/json',
          'Prefer': 'return=representation'
        },
      ).timeout(const Duration(seconds: 8));
      
      debugPrint('üîç Web references response status: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        _webReferences.clear();
        
        // Transformar los datos recibidos al formato esperado
        for (var item in data) {
          _webReferences.add({
            'treatment': item['treatment'],
            'url': item['url'],
            'title': item['title'],
            'summary': item['summary'],
            'tags': item['tags']
          });
        }
        
        // Guardar en cach√©
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('cached_web_references', jsonEncode(_webReferences));
        
        debugPrint('‚úÖ Referencias web actualizadas: ${data.length} p√°ginas');
      } else {
        debugPrint('‚ö†Ô∏è Error cargando referencias web: ${response.statusCode}');
        debugPrint('‚ö†Ô∏è Respuesta: ${response.body.substring(0, Math.min(100, response.body.length))}...');
        _loadFallbackWebReferences();
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error actualizando referencias web: $e');
      _loadFallbackWebReferences();
    }
  }
  
  // CONSULTA DE DATOS
  
  // Obtener categor√≠as de precios disponibles
  Future<List<String>> getPriceCategories() async {
    // Si las categor√≠as de precio ya est√°n cargadas, devolverlas directamente
    if (_prices.isNotEmpty) {
      return _prices.keys.toList();
    }
    
    // De lo contrario, cargar datos de respaldo
    _loadFallbackPrices();
    return _prices.keys.toList();
  }
  
  // Obtener informaci√≥n sobre horarios de cl√≠nicas
  Future<String> getClinicScheduleInfo() async {
    if (_clinics.isEmpty) {
      _loadFallbackClinics();
    }
    
    StringBuffer info = StringBuffer();
    info.writeln('Informaci√≥n sobre horarios y citas:');
    
    for (var clinic in _clinics) {
      info.writeln('- ${clinic['name']}:');
      info.writeln('  üìç ${clinic['address']}');
      info.writeln('  üìû ${clinic['phone']}');
      info.writeln('  üïí ${clinic['schedule']}');
      info.writeln();
    }
    
    info.writeln('Informaci√≥n general:');
    info.writeln('- Se requiere cita previa para todos los tratamientos');
    info.writeln('- Tiempo de espera promedio para citas: 2-3 d√≠as');
    info.writeln('- Se puede agendar por tel√©fono, WhatsApp o en la app');
    info.writeln('- Se solicita llegar 15 minutos antes de la cita');
    
    return info.toString();
  }
  
  // Buscar precios por t√©rmino espec√≠fico
  Future<List<Map<String, dynamic>>> searchPrices(String query) async {
    // Asegurar que tenemos datos
    if (_prices.isEmpty) {
      _loadFallbackPrices();
    }
    
    // Normalizar consulta
    query = query.toLowerCase()
      .replaceAll('√°', 'a')
      .replaceAll('√©', 'e')
      .replaceAll('√≠', 'i')
      .replaceAll('√≥', 'o')
      .replaceAll('√∫', 'u');
    
    List<Map<String, dynamic>> results = [];
    
    // Buscar en todas las categor√≠as
    for (var category in _prices.keys) {
      for (var priceItem in _prices[category]!) {
        final treatment = priceItem['treatment'].toString().toLowerCase();
        final description = priceItem['description']?.toString().toLowerCase() ?? '';
        
        if (treatment.contains(query) || description.contains(query) || category.toLowerCase().contains(query)) {
          results.add(priceItem);
        }
      }
    }
    
    return results;
  }
  
  // Obtener datos relevantes basados en la consulta del usuario
  Future<Map<String, dynamic>> getRelevantContext(String query, {String? preferredType}) async {
    final result = <String, dynamic>{};
    
    // Normalizar consulta
    query = query.toLowerCase();
    
    // Buscar t√©rminos clave
    List<String> keywords = _extractKeywords(query);
    debugPrint('üîç Palabras clave extra√≠das: ${keywords.join(", ")}');
    
    // Buscar precios relevantes
    final relevantPrices = <Map<String, dynamic>>[];
    for (final category in _prices.keys) {
      for (final price in _prices[category]!) {
        final treatment = (price['treatment'] as String).toLowerCase();
        if (keywords.any((kw) => treatment.contains(kw)) || 
            keywords.any((kw) => category.toLowerCase().contains(kw))) {
          relevantPrices.add(price);
        }
      }
    }
    
    if (relevantPrices.isNotEmpty) {
      result['prices'] = relevantPrices;
      debugPrint('üí∞ Encontrados ${relevantPrices.length} precios relevantes');
    } else if (query.contains('precio') || query.contains('costo')) {
      // Si pregunt√≥ por precios pero no encontramos espec√≠ficos, dar categor√≠as
      result['price_categories'] = _prices.keys.toList();
      debugPrint('üìã No se encontraron precios espec√≠ficos, devolviendo categor√≠as');
    }
    
    // Buscar tratamientos relevantes
    final relevantTreatments = <Map<String, dynamic>>[];
    for (final category in _treatments.keys) {
      for (final treatment in _treatments[category]!) {
        final name = (treatment['name'] as String).toLowerCase();
        if (keywords.any((kw) => name.contains(kw)) ||
            keywords.any((kw) => category.toLowerCase().contains(kw))) {
          relevantTreatments.add(treatment);
        }
      }
    }
    
    if (relevantTreatments.isNotEmpty) {
      result['treatments'] = relevantTreatments;
      debugPrint('üíâ Encontrados ${relevantTreatments.length} tratamientos relevantes');
    }
    
    // Buscar FAQs relevantes
    final relevantFAQs = _faq.where((faq) {
      final question = (faq['question'] as String).toLowerCase();
      final answer = (faq['answer'] as String).toLowerCase();
      return keywords.any((kw) => question.contains(kw) || answer.contains(kw));
    }).toList();
    
    if (relevantFAQs.isNotEmpty) {
      result['faqs'] = relevantFAQs;
      debugPrint('‚ùì Encontradas ${relevantFAQs.length} FAQs relevantes');
    }

    // Buscar referencias web relevantes
    final relevantWebReferences = _webReferences.where((ref) {
      final treatment = (ref['treatment'] as String).toLowerCase();
      final title = (ref['title'] as String).toLowerCase();
      final summary = (ref['summary'] as String).toLowerCase();
      final tags = (ref['tags'] as List).cast<String>().map((t) => t.toLowerCase());
      
      return keywords.any((kw) => 
          treatment.contains(kw) || 
          title.contains(kw) || 
          summary.contains(kw) || 
          tags.any((tag) => tag.contains(kw)));
    }).toList();
    
    if (relevantWebReferences.isNotEmpty) {
      result['web_references'] = relevantWebReferences;
      debugPrint('üåê Encontradas ${relevantWebReferences.length} referencias web relevantes');
    }
    
    // Incluir informaci√≥n de cl√≠nicas si es relevante
    if (query.contains('cl√≠nica') || query.contains('direcci√≥n') || 
        query.contains('ubicaci√≥n') || query.contains('donde') ||
        query.contains('d√≥nde') || query.contains('sitio') || 
        query.contains('lugar') || query.contains('c√≥mo llegar') || 
        query.contains('on es') || query.contains('ubicacions') ||
        query.contains('cliniques') || query.contains('where') ||
        query.contains('location') || query.contains('address') ||
        query.contains('barcelona') || query.contains('madrid') ||
        query.contains('m√°laga') || query.contains('malaga') ||
        query.contains('tenerife')) {  // A√±adida detecci√≥n por ciudad
      result['clinics'] = _clinics;
      debugPrint('üè• Incluyendo informaci√≥n de cl√≠nicas');
    }

      // detecci√≥n espec√≠fica para precios
     bool isPriceQuery = query.contains('precio') || query.contains('costo') || 
                     query.contains('cu√°nto') || query.contains('cuanto') ||
                     query.contains('vale') || query.contains('cuesta');
  
       if (isPriceQuery) {
    // Si es consulta de precio, buscar m√°s agresivamente
    for (final category in _prices.keys) {
      for (final price in _prices[category]!) {
        final treatment = (price['treatment'] as String).toLowerCase();
        // Buscar coincidencia directa con cualquier palabra clave
        if (keywords.any((kw) => treatment.contains(kw))) {
          relevantPrices.add(price);
          debugPrint('‚úÖ Coincidencia directa: $treatment con $keywords');
        }
        // Si es "aumento de labios" espec√≠ficamente
        else if (query.contains('labio') && 
                (treatment.contains('labio') || treatment.contains('lip'))) {
          relevantPrices.add(price);
          debugPrint('‚úÖ Coincidencia especial para labios');
        }

          // A√±ade l√≥gica para priorizar el tipo preferido
        if (preferredType != null) {
          debugPrint('üîç Buscando principalmente: $preferredType para: "$query"');
          
          // Si preferredType es 'prices', prioriza la b√∫squeda en los precios
          if (preferredType == 'prices' && relevantPrices.isNotEmpty) {
            // Dar prioridad a los precios en los resultados
            result['prices'] = relevantPrices;
          }
          // Si preferredType es 'treatments', prioriza la b√∫squeda en los tratamientos
          else if (preferredType == 'treatments' && relevantTreatments.isNotEmpty) {
            // Dar prioridad a los tratamientos en los resultados
            result['treatments'] = relevantTreatments;
          }
        }
      }
    }
  }
    
    return result;
  }
  
  // Extraer palabras clave de la consulta
  List<String> _extractKeywords(String query) {
    // Lista de palabras a ignorar (stop words)
    final stopWords = [
      'el', 'la', 'los', 'las', 'un', 'una', 'unos', 'unas',
      'de', 'del', 'al', 'a', 'ante', 'con', 'en', 'para', 'por', 'sin',
      'que', 'como', 'cuando', 'cuanto', 'quien',
      'y', 'o', 'pero', 'si', 'no',
      'es', 'son', 'ser', 'estar', 'hay',
      'me', 'te', 'se', 'nos', 'os',
      'cual', 'cuales', 'este', 'esta', 'esto', 'estos', 'estas',
      'aquel', 'aquella', 'aquello', 'aquellos', 'aquellas',
      'mi', 'tu', 'su', 'mis', 'tus', 'sus',
      'hola', 'adios', 'gracias',
      'valor', 'cuanto', 'cu√°nto',
    ];
    
    // Limpiar y normalizar
    query = query
        .replaceAll(RegExp(r'[^\w\s]'), ' ') // Quitar puntuaci√≥n
        .toLowerCase();
        
    // Dividir por espacios y filtrar palabras cortas y stop words
    return query
        .split(' ')
        .where((word) => 
            word.isNotEmpty && 
            word.length > 2 && 
            !stopWords.contains(word))
        .toList();
  }
  
  // Convertir datos a formato para el prompt
  String formatContextForPrompt(Map<String, dynamic> context) {
    final buffer = StringBuffer();
    
    // Formatear cl√≠nicas con √©nfasis
    if (context.containsKey('clinics') && context['clinics'] is List) {
      buffer.writeln('\nUBICACIONES EXACTAS DE CL√çNICAS LOVE:');
      final clinics = context['clinics'] as List;
      for (var i = 0; i < clinics.length; i++) {
        final clinic = clinics[i];
        buffer.writeln('${i+1}. ${clinic['name']}: DIRECCI√ìN EXACTA ‚Üí ${clinic['address']}');
        if (clinic['phone'] != null) {
          buffer.writeln('   Tel√©fono: ${clinic['phone']}');
        }
        if (clinic['schedule'] != null) {
          buffer.writeln('   Horario: ${clinic['schedule']}');
        }
      }
      buffer.writeln('\nIMPORTANTE: SOLO EXISTEN ESTAS UBICACIONES. NO HAY OTRAS SUCURSALES.');
    }
  

    // Formatear categor√≠as de precios
    if (context.containsKey('price_categories')) {
      buffer.writeln('CATEGOR√çAS DE PRECIOS DISPONIBLES:');
      for (var category in context['price_categories'] as List) {
        buffer.writeln('- $category');
      }
      buffer.writeln();
    }
    
    // Formatear tratamientos
    if (context.containsKey('treatments')) {
      buffer.writeln('INFORMACI√ìN DE TRATAMIENTOS:');
      for (var treatment in context['treatments'] as List) {
        buffer.writeln('- ${treatment['name']}');
        buffer.writeln('  ${treatment['description']}');
        if (treatment['benefits'] != null) {
          buffer.writeln('  Beneficios: ${(treatment['benefits'] as List).join(", ")}');
        }
      }
      buffer.writeln();
    }
    
    // Formatear FAQs
    if (context.containsKey('faqs')) {
      buffer.writeln('PREGUNTAS FRECUENTES RELEVANTES:');
      for (var faq in context['faqs'] as List) {
        buffer.writeln('- Pregunta: ${faq['question']}');
        buffer.writeln('  Respuesta: ${faq['answer']}');
      }
      buffer.writeln();
    }
    
    // Formatear cl√≠nicas
    if (context.containsKey('clinics')) {
      buffer.writeln('INFORMACI√ìN DE CL√çNICAS:');
      for (var clinic in context['clinics'] as List) {
        buffer.writeln('- ${clinic['name']}');
        buffer.writeln('  Direcci√≥n: ${clinic['address']}');
        buffer.writeln('  Tel√©fono: ${clinic['phone']}');
        buffer.writeln('  Horario: ${clinic['schedule']}');
      }
      buffer.writeln();
    }
    // Formatear referencias web
    if (context.containsKey('web_references')) {
      buffer.writeln('REFERENCIAS WEB SOBRE TRATAMIENTOS:');
      for (var ref in context['web_references'] as List) {
        buffer.writeln('- ${ref['treatment']} | ${ref['title']}');
        buffer.writeln('  ${ref['summary']}');
        buffer.writeln('  üîó Fuente: ${ref['url']}');
      }
      buffer.writeln();
    }
    
    // A√±adir informaci√≥n de precios
    if (context.containsKey('prices')) {
      final prices = context['prices'] as List<Map<String, dynamic>>;
      if (prices.isNotEmpty) {
        buffer.writeln('PRECIOS:');
        for (final price in prices) {
          buffer.writeln('- ${price['treatment']}: ${price['price']}');
        }
        buffer.writeln();
      }
    }
    
    return buffer.toString();
  }

  // M√©todo para acceder directamente a TODAS las cl√≠nicas sin filtros
  Future<List<Map<String, dynamic>>> getAllClinics() async {
    // Asegurarnos de que la base de conocimiento est√° inicializada
    if (!_isInitialized) {
      await initialize();
    }
    
    // Si tenemos cl√≠nicas cargadas, devolverlas directamente
    if (_clinics.isNotEmpty) {
      return List<Map<String, dynamic>>.from(_clinics);
    }
    
    // Si llegamos aqu√≠, cargar las cl√≠nicas de respaldo
    _loadFallbackClinics();
    return List<Map<String, dynamic>>.from(_clinics);
  }
}