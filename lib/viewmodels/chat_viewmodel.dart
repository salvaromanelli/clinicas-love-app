import 'package:flutter/material.dart';
import 'package:flutter_application_1/services/claude_assistant_service.dart';
import '/virtual_assistant_chat.dart' hide AppointmentInfo;
import '/i18n/app_localizations.dart';
import '/services/knowledge_base.dart';
import 'package:intl/date_symbol_data_local.dart';
import '/services/supabase.dart';

class ConversationContext {
  String currentTopic = '';
  String lastMentionedTreatment = '';
  String lastMentionedPrice = '';
  String lastMentionedLocation = '';
  List<String> mentionedTreatments = [];
}


class ChatViewModel extends ChangeNotifier {
  final ClaudeAssistantService _aiService;
  final AppLocalizations localizations;
  final KnowledgeBase _knowledgeBase;
  
  List<ChatMessage> messages = [];
  bool isTyping = false;
  bool isBookingFlow = false;
  
  // Variables auxiliares para el flujo de reserva
  DateTime? _currentDateSelection;
  DateTime? _currentTimeSelection;
  List<String> suggestedReplies = [];
  
  ChatViewModel({
    required ClaudeAssistantService aiService,
    required this.localizations,
  }) : _aiService = aiService,
      _knowledgeBase = KnowledgeBase() {
    _initKnowledgeBase();
    initializeDateFormatting('es');
  }

  Future<void> _initKnowledgeBase() async {
    try {
      await _knowledgeBase.initialize();
      debugPrint('‚úÖ Base de conocimientos inicializada correctamente');
    } catch (error) {
      debugPrint('‚ö†Ô∏è Error inicializando base de conocimientos: $error');
    }
  }
    
  void sendWelcomeMessage() {
    final welcomeMessage = localizations.get('welcome_message');
    messages.add(ChatMessage(text: welcomeMessage, isUser: false));
    
    suggestedReplies = [
      localizations.get('what_treatments'),
      localizations.get('want_know_prices'),
      localizations.get('where_located'),
      localizations.get('need_appointment')
    ];
    
    notifyListeners();
  }
  
  // NUEVO M√âTODO PRINCIPAL: Procesa mensajes con IA
  Future<void> sendMessage(String message) async {
    try {
      messages.add(ChatMessage(text: message, isUser: true));
      isTyping = true;
      notifyListeners();
      
      // NUEVO: Detecci√≥n de preguntas sobre ubicaci√≥n
      final normalizedMsg = message.toLowerCase();
      final isLocationQuery = normalizedMsg.contains('d√≥nde') || 
                            normalizedMsg.contains('donde') ||
                            normalizedMsg.contains('ubicacion') ||
                            normalizedMsg.contains('ubicaci√≥n') ||
                            normalizedMsg.contains('direccion') ||
                            normalizedMsg.contains('direcci√≥n') ||
                            normalizedMsg.contains('cl√≠nica') ||
                            (normalizedMsg.contains('est√°n') && normalizedMsg.contains('ubicad'));
      
      // NUEVO: Respuesta hardcoded para ubicaciones
      if (isLocationQuery) {
        debugPrint('üìç INTERCEPTANDO PREGUNTA SOBRE UBICACI√ìN: "$message"');
        
        // Respuesta hardcoded con datos exactos de las cl√≠nicas
        final locationResponse = """Nuestras cl√≠nicas est√°n ubicadas en:

          üìç **Cl√≠nicas Love Barcelona**
            Direcci√≥n: Carrer Diputacio 327, 08009 Barcelona
            Tel√©fono: +34 938526533
            Horario: Lunes a Viernes: 9:00 - 20:00.

          üìç **Cl√≠nicas Love Madrid**
            Direcci√≥n: Calle Edgar Neville, 16, 28020 Madrid
            Tel√©fono: +34 919993515
            Horario: Lunes a Viernes: 10:00 - 20:00.

          ¬øNecesitas informaci√≥n sobre c√≥mo llegar a alguna de nuestras cl√≠nicas?""";

        // Agregar directamente la respuesta hardcoded
        messages.add(ChatMessage(text: locationResponse, isUser: false));
        isTyping = false;
        notifyListeners();
        
        debugPrint('‚úÖ RESPUESTA DE UBICACI√ìN HARDCODED ENVIADA');
        return; // Terminar aqu√≠
      }
        
      // Analizar el contexto actual de la conversaci√≥n
      final ConversationContext conversationContext = _analyzeConversationContext();
      
      // Preparar estado actual para la IA con m√°s contexto
      final currentState = {
        'language': localizations.locale.languageCode,
        'conversation_topic': conversationContext.currentTopic,
        'last_mentioned_treatment': conversationContext.lastMentionedTreatment,
        'last_mentioned_price': conversationContext.lastMentionedPrice,
        'last_mentioned_location': conversationContext.lastMentionedLocation,
      };
      
      // Procesar con la IA incluyendo historia conversacional relevante
      final processedMessage = await _aiService.processMessage(
        message,
        // Enviar m√°s mensajes de historial para mantener el contexto
        messages.sublist(messages.length > 10 ? messages.length - 10 : 0, messages.length - 1),
        currentState
      );

      messages.add(ChatMessage(
        text: processedMessage.text, 
        isUser: false,
        additionalContext: processedMessage.additionalContext
      ));

      // Actualizar sugerencias basadas en el nuevo contexto
      _generateSuggestionsBasedOnContext(message, processedMessage.text);
      
    } catch (e) {
      debugPrint('‚ùå Error: $e');
      messages.add(ChatMessage(
        text: localizations.get('chat_error') ?? 
            "Lo siento, ha ocurrido un error al procesar tu mensaje.",
        isUser: false
      ));
    } finally {
      isTyping = false;
      notifyListeners();
    }
  }
  
  Future<ProcessedMessage> processMessage(String message, String language) async {
    try {
      isTyping = true;
      notifyListeners();

      // Preparar el contexto actual para la IA
      final currentState = {
        'language': language,
      };

      // Procesar el mensaje con Claude
      final processedMessage = await _aiService.processMessage(
        message,
        messages,
        currentState,
      );
      
      return processedMessage;
    } catch (e) {
      debugPrint('‚ùå Error procesando el mensaje con Claude: $e');
      
      // Crear el mensaje de error de forma expl√≠cita
      final errorText = localizations.get('chat_error') ??
            "Lo siento, ha ocurrido un error al procesar tu mensaje.";
      
      // Usar Future.value con tipo expl√≠cito para evitar ambig√ºedades
      return Future<ProcessedMessage>.value(ProcessedMessage(
        text: errorText
      ));
    } finally {
      isTyping = false;
      notifyListeners();
    }
  }
  
  // SIMPLIFICADO: Genera sugerencias basadas en contexto detectado por la IA
  void _generateSuggestionsBasedOnContext(String userMessage, String aiResponse) {
    // Extraer temas clave de la respuesta
    final text = (userMessage + " " + aiResponse).toLowerCase();
    
    if (text.contains("botox") || text.contains("relleno")) {
      suggestedReplies = [
        localizations.get('which_areas') ?? "¬øEn qu√© zonas se aplica?",
        localizations.get('effect_duration') ?? "¬øCu√°nto dura el efecto?",
        localizations.get('what_is_price') ?? "¬øCu√°l es el precio?"
      ];
    } else if (text.contains("precio") || text.contains("costo")) {
      suggestedReplies = [
        localizations.get('have_promotions') ?? "¬øTienen promociones?",
        localizations.get('accept_cards') ?? "¬øAceptan tarjetas?",
      ];
    } else {
      // Sugerencias por defecto
      suggestedReplies = [
        localizations.get('see_available_treatments') ?? "Ver tratamientos",
        localizations.get('consultation_prices') ?? "Precios de consulta",
      ];
    }
  }

  // A√±adir mensaje de usuario directamente
  void addUserMessage(String text) {
    messages.add(ChatMessage(text: text, isUser: true));
    notifyListeners();
  }

  // A√±adir mensaje de asistente directamente
  void addBotMessage(String text, {String? additionalContext}) {
    messages.add(ChatMessage(
      text: text,
      isUser: false,
      additionalContext: additionalContext,
    ));
    notifyListeners();
  }

  // Cambiar estado de escritura
  void setTyping(bool typing) {
    isTyping = typing;
    notifyListeners();
  }

  // Procesar con la IA directamente (sin a√±adir mensaje del usuario)
  void processMessageWithAI(String text) {
    isTyping = true;
    notifyListeners();
    
    _aiService.processMessage(text, messages, {}).then((dynamic processedResponse) {
      isTyping = false;
      // Convertir la respuesta din√°mica a nuestro tipo espec√≠fico
      final ProcessedMessage processedMessage;
      
      if (processedResponse is ProcessedMessage) {
        processedMessage = processedResponse;
      } else {
        // Manejar el caso cuando la respuesta no es del tipo esperado
        messages.add(ChatMessage(
          text: localizations.get('error_processing_message') ?? "Error procesando el mensaje",
          isUser: false
        ));
        notifyListeners();
        return;
      }
      
      // Ahora podemos usar processedMessage con seguridad
      messages.add(ChatMessage(
        text: processedMessage.text,
        isUser: false
      ));
      
      notifyListeners();
    }).catchError((error) {
      // Resto del c√≥digo sin cambios
    });
  }
   
  // Obtener informaci√≥n espec√≠fica de precios desde la knowledge base
  Future<String> getSpecificPriceFromKnowledgeBase(String userMessage) async {
    try {
      // IMPORTANTE: Primero analizar el contexto de la conversaci√≥n
      final conversationContext = _analyzeConversationContext();
      
      // Crear una consulta mejorada que incluya el contexto de la conversaci√≥n
      String enhancedQuery = userMessage;
      
      // Si la consulta es gen√©rica sobre precios y hay un tratamiento mencionado recientemente
      if (_containsAny(userMessage.toLowerCase(), ['precio', 'cuesta', 'cu√°nto', 'cuanto', 'valor', 'costo']) && 
          !_containsSpecificTreatment(userMessage) && 
          conversationContext.lastMentionedTreatment.isNotEmpty) {
        
        debugPrint('üí¨ Detectada pregunta de precio en contexto de: ${conversationContext.lastMentionedTreatment}');
        // Agregar el tratamiento del contexto a la consulta
        enhancedQuery = '${userMessage} ${conversationContext.lastMentionedTreatment}';
        debugPrint('üîÑ Consulta mejorada: $enhancedQuery');
      }
      
      // Obtener el contexto relevante usando la consulta mejorada
      final knowledgeContext = await _knowledgeBase.getRelevantContext(
        enhancedQuery,  // Usar la consulta mejorada
        preferredType: 'prices'
      );
      
      if (knowledgeContext.containsKey('prices') && knowledgeContext['prices'] is List) {
        final List<Map<String, dynamic>> prices = List<Map<String, dynamic>>.from(knowledgeContext['prices']);
        
        debugPrint('üí∞ Encontrados ${prices.length} precios en la base de conocimiento');
        debugPrint('üîç Buscando precios para: $enhancedQuery');
        
        final keywords = extractKeywords(enhancedQuery);
        debugPrint('üîç Palabras clave extra√≠das: $keywords');
        
        // Parte 1: Buscar coincidencias exactas primero
        for (var price in prices) {
          final treatment = price['treatment'].toString().toLowerCase();
          
          if (enhancedQuery.toLowerCase().contains(treatment)) {
            debugPrint('‚úÖ Coincidencia exacta encontrada para: $treatment');
            
            // IMPORTANTE: Manejar caso donde la descripci√≥n puede ser null
            final description = price['description'] ?? 
                "Tratamiento especializado realizado por nuestros m√©dicos expertos.";
            
            return """
            **${price['treatment']}**

            $description

            **Precio:** ${price['price']}

            ¬øDeseas agendar una cita para este tratamiento?
                      """;
          }
        }
        
        // Parte 2: Si no hay coincidencia exacta, encontrar el M√ÅS relevante
        Map<String, dynamic>? bestMatch;
        int maxScore = -1;
        
        for (var price in prices) {
          final treatment = price['treatment'].toString().toLowerCase();
          final description = price['description']?.toString().toLowerCase() ?? '';
          final category = price['category']?.toString().toLowerCase() ?? '';
          
          int score = 0;
          
          // Calcular puntuaci√≥n basada en palabras clave encontradas
          for (var keyword in keywords) {
            if (treatment.contains(keyword)) score += 3; // Mayor peso a coincidencias en nombre
            if (description.contains(keyword)) score += 1;
            if (category.contains(keyword)) score += 2;
          }
          
          // Si es la mejor coincidencia hasta ahora
          if (score > maxScore) {
            maxScore = score;
            bestMatch = price;
          }
        }
        
        // Si encontramos al menos una coincidencia relevante
        if (bestMatch != null && maxScore > 0) {
          debugPrint('‚úÖ Mejor coincidencia encontrada: ${bestMatch['treatment']} con puntuaci√≥n $maxScore');
          
          // IMPORTANTE: Manejar caso donde la descripci√≥n puede ser null
          final description = bestMatch['description'] ?? 
              "Tratamiento especializado realizado por nuestros m√©dicos expertos.";
          
          return """
  **${bestMatch['treatment']}**

  $description

  **Precio:** ${bestMatch['price']}

  ¬øDeseas agendar una cita para este tratamiento?
          """;
        }
        
        // IMPORTANTE: Solo mostrar m√∫ltiples resultados si la consulta parece expl√≠citamente buscar m√∫ltiples tratamientos
        final isGeneralQuery = _containsAny(enhancedQuery.toLowerCase(), ['todos', 'varios', 'diferentes', 'lista', 'opciones']);
        
        if (isGeneralQuery) {
          // Mostrar hasta 3 tratamientos si la consulta parece general
          List<Map<String, dynamic>> relevantPrices = [];
          
          for (var price in prices) {
            final treatment = price['treatment'].toString().toLowerCase();
            final description = price['description']?.toString().toLowerCase() ?? '';
            
            for (var keyword in keywords) {
              if (treatment.contains(keyword) || description.contains(keyword)) {
                relevantPrices.add(price);
                break;
              }
            }
            
            if (relevantPrices.length >= 3) break;
          }
          
          if (relevantPrices.isNotEmpty) {
            final buffer = StringBuffer();
            buffer.writeln('**Algunos tratamientos relacionados:**\n');
            
            for (var price in relevantPrices) {
              buffer.writeln('**${price['treatment']}**');
              final desc = price['description'] ?? "Tratamiento especializado en nuestras cl√≠nicas.";
              buffer.writeln(desc);
              buffer.writeln('**Precio:** ${price['price']}\n');
            }
            
            return buffer.toString();
          }
        }
      }
      
      // Mensaje para cuando no hay coincidencias
      return """
  Lo siento, no encontr√© informaci√≥n espec√≠fica sobre precios para tu consulta. 
  Por favor, pregunta por un tratamiento espec√≠fico como "Botox", "aumento de labios" o "rinoplastia".
      """;
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error al obtener precios: $e');
      return "Lo siento, hubo un problema al buscar informaci√≥n de precios. Por favor, intenta con otra pregunta.";
    }
  }

  // A√±ade este m√©todo auxiliar si no existe ya
  bool _containsAny(String text, List<String> keywords) {
    for (var keyword in keywords) {
      if (text.contains(keyword)) {
        return true;
      }
    }
    return false;
  }

  // NUEVO: M√©todo para verificar si un mensaje contiene un tratamiento espec√≠fico
  bool _containsSpecificTreatment(String message) {
    final commonTreatments = [
      'botox', 'rinomodelaci√≥n', 'rinoplastia', 'rinoseptoplastia', 'nariz', 'labio', 'labios',
      'facial', 'peeling', 'mesoterapia', '√°cido', 'hialur√≥nico', 'aumento', 'lifting',
      'relleno', 'ojeras', 'vitaminas'
    ];
    
    final lowerMessage = message.toLowerCase();
    
    for (var treatment in commonTreatments) {
      if (lowerMessage.contains(treatment)) {
        return true;
      }
    }
    
    return false;
  }

  // M√©todo para extraer palabras clave de una consulta
  List<String> extractKeywords(String query) {
    // Normalizar el texto: min√∫sculas y sin acentos
    final normalizedText = _normalizeText(query);
    
    // Lista de palabras a ignorar (stopwords)
    final stopwords = [
      'el', 'la', 'los', 'las', 'un', 'una', 'unos', 'unas', 'y', 'o', 'a', 'de', 'en', 'con', 'por',
      'para', 'como', 'que', 'se', 'su', 'sus', 'mi', 'mis', 'tu', 'tus', 'es', 'son', 'sobre',
      'hay', 'tienen', 'tienen', 'quiero', 'saber', 'conocer', 'informacion', 'informacion',
      'tener', 'sobre', 'acerca', 'cuales', 'todos', 'todas', 'del', 'al', 'me', 'gustaria',
      'podrias', 'puede', 'pueden', 'ofrece', 'ofrecen'
    ];
    
    // Dividir en palabras
    final words = normalizedText.split(RegExp(r'\s+|,|\.|\?|¬ø|!|¬°'));
    
    // Filtrar palabras relevantes
    List<String> keywords = words
        .where((word) => word.length > 2)  // Palabras de al menos 3 caracteres
        .where((word) => !stopwords.contains(word))  // Excluir stopwords
        .toList();
    
    // Palabras clave prioritarias (√°reas del cuerpo y tratamientos)
    final priorityKeywords = [
      'nariz', 'facial', 'cara', 'labios', 'piel', 'cuerpo', 'ojos', 'frente', 'cuello',
      'botox', 'relleno', 'acido', 'hialuronico', 'peeling', 'hidratacion', 'rino', 'rinoplastia'
    ];
    
    // Priorizar t√©rminos espec√≠ficos
    List<String> priorityMatches = [];
    for (var word in keywords) {
      if (priorityKeywords.contains(word)) {
        priorityMatches.add(word);
      }
    }
    
    // Si encontramos palabras prioritarias, ponerlas primero
    if (priorityMatches.isNotEmpty) {
      keywords = [...priorityMatches, ...keywords.where((w) => !priorityMatches.contains(w))];
    }
    
    debugPrint('üîç Palabras clave extra√≠das: $keywords');
    return keywords;
  }

  // M√©todo para obtener todos los tratamientos por √°rea/categor√≠a
  Future<String> getAllTreatmentsByArea(String query) async {
    try {
      // Extraer palabras clave del query
      final keywords = extractKeywords(query);
      debugPrint('üîç Palabras clave extra√≠das: ${keywords.join(", ")}');
      
      // Obtener todos los tratamientos de Supabase
      final supabase = SupabaseService().client;
      final response = await supabase
          .from('treatments')
          .select('*')
          .order('name');
      
      debugPrint('üìã Obtenidos ${response.length} tratamientos');
      
      // Convertir la respuesta a una lista de mapas
      List<Map<String, dynamic>> treatments = List<Map<String, dynamic>>.from(response);
      
      // Filtrar por √°rea o categor√≠a si se especific√≥
      List<Map<String, dynamic>> filteredTreatments = [];
      
      // Palabras clave para filtrar por √°rea
      final areaKeyword = keywords.firstWhere(
          (k) => ['nariz', 'facial', 'cara', 'labios', 'piel', 'cuerpo'].contains(k), 
          orElse: () => '');
      
      if (areaKeyword.isNotEmpty) {
        // Filtrar tratamientos por el √°rea especificada
        filteredTreatments = treatments.where((t) {
          String name = t['name']?.toString().toLowerCase() ?? '';
          String desc = t['description']?.toString().toLowerCase() ?? '';
          String category = t['category']?.toString().toLowerCase() ?? '';
          
          // Para nariz espec√≠ficamente
          if (areaKeyword == 'nariz') {
            return name.contains('nariz') || 
                  name.contains('rinop') || 
                  name.contains('rino') || 
                  desc.contains('nariz') || 
                  desc.contains('nasal') ||
                  category.contains('nariz');
          }
          
          // Para otras √°reas
          return name.contains(areaKeyword) || 
                desc.contains(areaKeyword) || 
                category.contains(areaKeyword);
        }).toList();
      }
      
      // Si no hay filtrados, mostrar mensaje de que no se encontraron tratamientos
      if (filteredTreatments.isEmpty) {
        return "Lo siento, no encontr√© tratamientos espec√≠ficos para '${areaKeyword}' en nuestra base de datos.";
      }
      
      // Construir respuesta con todos los tratamientos encontrados
      final buffer = StringBuffer();
      buffer.writeln('**Tratamientos disponibles para ${areaKeyword}:**\n');
      
      for (var treatment in filteredTreatments) {
        buffer.writeln('**${treatment['name']}**');
        buffer.writeln('‚Ä¢ ${treatment['description']}');
        buffer.writeln('‚Ä¢ Duraci√≥n aproximada: ${treatment['duration']} minutos');
        buffer.writeln('‚Ä¢ Precio: ${treatment['price'].toStringAsFixed(2)}‚Ç¨\n');
      }
      
      buffer.writeln('\n¬øTe gustar√≠a m√°s informaci√≥n sobre alguno de estos tratamientos en particular?');
      
      return buffer.toString();
    } catch (e) {
      debugPrint('‚ùå Error obteniendo tratamientos: $e');
      return "Lo siento, hubo un problema al buscar los tratamientos disponibles. ¬øPuedes intentar con otra pregunta?";
    }
  }

  // Obtener informaci√≥n espec√≠fica de tratamientos
  Future<String> getTreatmentInfoFromKnowledgeBase(String userMessage) async {
    if (_knowledgeBase == null) return "";
    
    try {
      // Obtener contexto con preferencia a tratamientos
      final knowledgeContext = await _knowledgeBase.getRelevantContext(
        userMessage, 
        preferredType: 'treatments'  // Indica que preferimos informaci√≥n de tratamientos
      );
      
      debugPrint('üîç Buscando informaci√≥n de tratamientos en knowledge base');
      
      // Si hay tratamientos disponibles
      if (knowledgeContext.containsKey('treatments') && knowledgeContext['treatments'] is List) {
        final treatments = knowledgeContext['treatments'] as List;
        debugPrint('üíâ Encontrados ${treatments.length} tratamientos relevantes');
        
        // Para preguntas generales sobre tratamientos
        if (_containsAny(userMessage.toLowerCase(), ['qu√© tratamientos', 'que tratamientos', 'cu√°les son', 'cuales son', 'ofrecen', 'disponibles'])) {
          // Lista todos los tratamientos disponibles
          String treatmentInfo = "En Cl√≠nicas Love ofrecemos estos tratamientos est√©ticos:\n\n";
          
          // Agrupar por categor√≠as
          final Map<String, List<dynamic>> treatmentsByCategory = {};
          
          for (var treatment in treatments) {
            final category = treatment['category']?.toString() ?? 'General';
            treatmentsByCategory.putIfAbsent(category, () => []);
            treatmentsByCategory[category]!.add(treatment);
          }
          
          // Mostrar tratamientos por categor√≠a
          treatmentsByCategory.forEach((category, categoryTreatments) {
            treatmentInfo += "**$category**:\n";
            
            for (var t in categoryTreatments.take(4)) {
              treatmentInfo += "‚Ä¢ ${t['name']}";
              if (t['price'] != null) {
                treatmentInfo += " (${t['price']}‚Ç¨)";
              }
              treatmentInfo += "\n";
            }
            
            if (categoryTreatments.length > 4) {
              treatmentInfo += "‚Ä¢ Y otros tratamientos m√°s...\n";
            }
            
            treatmentInfo += "\n";
          });
          
          return treatmentInfo;
        }
        
        // Identificar el tratamiento espec√≠fico - usar bucle for en lugar de firstWhere
        final lowerMessage = userMessage.toLowerCase();
        for (var treatment in treatments) {
          final treatmentName = treatment['name']?.toString() ?? '';
          
          if (_messageContainsTreatment(lowerMessage, treatmentName)) {
            String treatmentInfo = "**${treatment['name']}**: ";
            
            if (treatment['description'] != null) {
              treatmentInfo += treatment['description'];
            }
            
            // A√±adir duraci√≥n si est√° disponible
            if (treatment['duration'] != null) {
              treatmentInfo += "\n\nDuraci√≥n aproximada: ${treatment['duration']} minutos.";
            }
            
            // A√±adir precio si est√° disponible
            if (treatment['price'] != null) {
              treatmentInfo += " Precio: ${treatment['price']}‚Ç¨.";
            }
            
            return treatmentInfo;
          }
        }
        
        // Si llegamos aqu√≠, no encontramos un tratamiento espec√≠fico
        if (treatments.isNotEmpty) {
          // Mostrar los tratamientos disponibles
          String treatmentInfo = "No encontr√© informaci√≥n espec√≠fica sobre ese tratamiento, pero en Cl√≠nicas Love ofrecemos estos tratamientos:\n\n";
          
          // Listar hasta 5 tratamientos
          int count = 0;
          for (var t in treatments) {
            if (count >= 5) break;
            treatmentInfo += "‚Ä¢ **${t['name']}**";
            if (t['price'] != null) {
              treatmentInfo += " (${t['price']}‚Ç¨)";
            }
            treatmentInfo += "\n";
            count++;
          }
          
          treatmentInfo += "\n¬øTe gustar√≠a informaci√≥n m√°s detallada sobre alguno de estos tratamientos?";
          return treatmentInfo;
        }
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error al obtener informaci√≥n de tratamientos: $e');
    }
    
    // Respuesta de respaldo si todo falla
    return "En Cl√≠nicas Love ofrecemos una amplia variedad de tratamientos est√©ticos, incluyendo:\n\n"
        "‚Ä¢ Tratamientos faciales: Botox, √°cido hialur√≥nico, rellenos, rinomodelaci√≥n\n"
        "‚Ä¢ Tratamientos corporales: Mesoterapia, tratamientos reductores\n"
        "‚Ä¢ Medicina est√©tica avanzada: Peelings qu√≠micos, l√°ser\n\n"
        "Todos realizados por m√©dicos especialistas. ¬øSobre qu√© tratamiento espec√≠fico te gustar√≠a m√°s informaci√≥n?";
  }

  // M√©todo auxiliar para verificar si un mensaje contiene el nombre de un tratamiento
  bool _messageContainsTreatment(String message, String treatmentName) {
    final treatmentLower = treatmentName.toLowerCase();
    
    // Palabras clave para tratamientos comunes
    final Map<String, List<String>> treatmentKeywords = {
      'botox': ['botox', 'toxina', 'botul√≠nica', 'arrugas'],
      'labios': ['labio', 'labios', 'relleno labial', 'aumento de labios'],
      'rinomodelaci√≥n': ['rino', 'rinomodelaci√≥n', 'nariz', 'rinoplastia'],
      'mesoterapia': ['meso', 'mesoterapia', 'facial', 'vitaminas'],
      'peeling': ['peeling', 'qu√≠mico', 'exfoliaci√≥n'],
      'facial': ['facial', 'limpieza facial', 'tratamiento facial'],
    };
    
    // Verificar coincidencia directa
    if (message.contains(treatmentLower)) {
      return true;
    }
    
    // Verificar por palabras clave espec√≠ficas
    for (final entry in treatmentKeywords.entries) {
      if (treatmentLower.contains(entry.key)) {
        for (final keyword in entry.value) {
          if (message.contains(keyword)) {
            return true;
          }
        }
      }
    }
    
    return false;
  }

  // M√©todo para analizar el contexto de la conversaci√≥n actual
  ConversationContext _analyzeConversationContext() {
    final context = ConversationContext();
    
    // No analizar si no hay mensajes suficientes
    if (messages.length < 2) return context;
    
    // Analizar los √∫ltimos mensajes para detectar temas, tratamientos, etc.
    final recentMessages = messages.sublist(messages.length > 6 ? messages.length - 6 : 0);
    
    // Concatenar todo el texto reciente para an√°lisis
    String recentText = recentMessages.map((m) => m.text.toLowerCase()).join(' ');
    
    // Detectar tema actual
    if (recentText.contains('precio') || recentText.contains('costo') || 
        recentText.contains('vale') || recentText.contains('cuesta')) {
      context.currentTopic = 'precios';
    } else if (recentText.contains('tratamiento') || recentText.contains('procedimiento')) {
      context.currentTopic = 'tratamientos';
    } else if (recentText.contains('ubicaci√≥n') || recentText.contains('direcci√≥n') || 
              recentText.contains('donde') || recentText.contains('cl√≠nica')) {
      context.currentTopic = 'ubicaciones';
    }
    
    // AMPLIADO: Detectar tratamientos mencionados con una lista m√°s extensa
    final treatmentsKeywords = {
      'botox': ['botox', 'toxina', 'botul√≠nica', 'arrugas'],
      '√°cido hialur√≥nico': ['√°cido', 'hialur√≥nico', 'relleno'],
      'labios rusos': ['ruso', 'rusos', 'lips', 'efecto'],
      'labios': ['labio', 'labios', 'aumento', 'labial'],
      'rinomodelaci√≥n': ['rino', 'nariz', 'rinomodelaci√≥n'],
      'rinoplastia': ['rinoplastia', 'cirug√≠a nariz'],
      'rinoseptoplastia': ['rinoseptoplastia', 'tabique', 'septum'],
      'peeling': ['peeling', 'qu√≠mico', 'exfoliaci√≥n'],
      'mastopexia': ['mastopexia', 'elevaci√≥n', 'pecho', 'mamaria', 'mama', 'senos'],
      'aumento de pecho': ['aumento', 'mamario', 'implante', 'silicona', 'senos'],
      'lipoescultura': ['lipo', 'lipoescultura', 'liposucci√≥n', 'grasa'],
      'blefaroplastia': ['blefaroplastia', 'p√°rpados', 'ojos'],
      'abdominoplastia': ['abdominoplastia', 'abdomen', 'vientre'],
      'lifting': ['lifting', 'tensado', 'facial'],
      'plasma': ['plasma', 'plaquetas', 'prp', 'rico'],
      'vitaminas': ['vitaminas', 'cocktail', 'inyecci√≥n'],
      'rejuvenecimiento': ['rejuvenecimiento', 'anti', 'edad', 'arrugas'],
      'mesoterapia': ['mesoterapia', 'meso', 'nutrici√≥n']
    };
    
    // MEJORADO: Estrategia de detecci√≥n del tratamiento m√°s relevante
    String mostRecentTreatment = '';
    int mostRecentPosition = -1;
    
    // Para cada tratamiento, buscar la posici√≥n m√°s reciente de menci√≥n
    treatmentsKeywords.forEach((treatment, keywords) {
      for (final keyword in keywords) {
        final keywordPosition = recentText.lastIndexOf(keyword);
        if (keywordPosition > -1 && keywordPosition > mostRecentPosition) {
          mostRecentPosition = keywordPosition;
          mostRecentTreatment = treatment;
          
          // A√±adir a la lista de tratamientos mencionados si no existe ya
          if (!context.mentionedTreatments.contains(treatment)) {
            context.mentionedTreatments.add(treatment);
          }
        }
      }
    });
    
    // Definir el tratamiento m√°s reciente si se encontr√≥ alguno
    if (mostRecentPosition > -1) {
      context.lastMentionedTreatment = mostRecentTreatment;
      debugPrint('üîÑ Tratamiento m√°s reciente detectado: ${context.lastMentionedTreatment}');
    }
    
    // Detectar ubicaciones mencionadas
    final locationsKeywords = ['barcelona', 'madrid', 'm√°laga', 'tenerife'];
    for (final location in locationsKeywords) {
      if (recentText.contains(location)) {
        context.lastMentionedLocation = location;
        break;
      }
    }
    
    // Verificar si hay un mensaje reciente que pregunte espec√≠ficamente por un precio
    final latestMessages = recentMessages.length > 2 ? recentMessages.sublist(recentMessages.length - 2) : recentMessages;
    final latestText = latestMessages.map((m) => m.text.toLowerCase()).join(' ');
    
    if ((latestText.contains('precio') || latestText.contains('cuesta') || latestText.contains('cu√°nto')) && 
        context.lastMentionedTreatment.isNotEmpty) {
      debugPrint('üí≤ Detectada pregunta espec√≠fica de precio para: ${context.lastMentionedTreatment}');
    }
    
    debugPrint('üìä An√°lisis de contexto completo: Tema: ${context.currentTopic}, Tratamiento: ${context.lastMentionedTreatment}');
    return context;
  }

  // M√©todo para reiniciar el chat
  
  void resetChat() {
    messages.clear();
    isBookingFlow = false;
    isTyping = false;
    sendWelcomeMessage();
  }


  String _normalizeText(String text) {
    // Normalizar: quitar acentos, convertir a min√∫sculas, eliminar caracteres especiales
    return text.toLowerCase()
        .replaceAll('√°', 'a')
        .replaceAll('√©', 'e')
        .replaceAll('√≠', 'i')
        .replaceAll('√≥', 'o')
        .replaceAll('√∫', 'u')
        .replaceAll('√±', 'n');
  }

  Future<String> _getClinicLocationsDirectly() async {
    try {
      debugPrint('üîç ACCEDIENDO DIRECTAMENTE A LA LISTA DE CL√çNICAS');
      
      // Acceder DIRECTAMENTE a las cl√≠nicas - importante usar await aqu√≠
      final List<Map<String, dynamic>> clinics = await _knowledgeBase.getAllClinics();
      
      // Depuraci√≥n profunda para verificar qu√© estamos obteniendo
      debugPrint('üìç CL√çNICAS OBTENIDAS: ${clinics.length}');
      for (var i = 0; i < clinics.length; i++) {
        debugPrint('Cl√≠nica ${i+1}: ${clinics[i]['name']} - ${clinics[i]['address']}');
      }
      
      if (clinics.isEmpty) {
        return "Lo siento, no tengo informaci√≥n sobre nuestras ubicaciones en este momento.";
      }
      
      // Construir respuesta manualmente con las ubicaciones reales
      String locationInfo = "Nuestras cl√≠nicas est√°n ubicadas en:\n\n";
      
      for (var clinic in clinics) {
        final name = clinic['name'] ?? 'Cl√≠nica Love';
        final address = clinic['address'] ?? 'Direcci√≥n no disponible';
        final phone = clinic['phone'] ?? 'Tel√©fono no disponible';
        final schedule = clinic['schedule'] ?? 'Horario no disponible';
        
        locationInfo += "üìç **$name**\n";
        locationInfo += "   Direcci√≥n: $address\n";
        locationInfo += "   Tel√©fono: $phone\n";
        locationInfo += "   Horario: $schedule\n\n";
      }
      
      locationInfo += "¬øNecesitas informaci√≥n sobre c√≥mo llegar a alguna de nuestras cl√≠nicas?";
      return locationInfo;
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error obteniendo ubicaciones: $e');
      // Si hay error, devolver informaci√≥n hardcoded como √∫ltimo recurso
      return "Nuestras cl√≠nicas est√°n ubicadas en:\n\n" +
            "üìç **Cl√≠nicas Love Barcelona**\n" +
            "   Direcci√≥n: Carrer Diputacio 327, 08009 Barcelona\n" +
            "   Tel√©fono: +34 938526533\n" +
            "   Horario: Lunes a Viernes: 9:00 - 20:00.\n\n" +
            "üìç **Cl√≠nicas Love Madrid**\n" +
            "   Direcci√≥n: Calle Edgar Neville, 16. 28020 Madrid\n" +
            "   Tel√©fono: 34 919993515\n" +
            "   Horario: Lunes a Viernes: 10:00 - 20:00.\n\n" +
            "¬øNecesitas informaci√≥n sobre c√≥mo llegar a alguna de nuestras cl√≠nicas?";
    }
  }
}